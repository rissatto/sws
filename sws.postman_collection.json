{
  "info": {
    "name": "Simple Wallet Service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string",
      "description": "Local API running"
    },
    {
      "key": "idempotencyKey",
      "value": "00000000-0000-0000-0000-000000000000",
      "type": "string",
      "description": "UUID placeholder for idempotencyKey"
    },
    {
      "key": "timestamp",
      "value": "2025-04-28T00:00:00Z",
      "type": "string",
      "description": "timestamp for testing"
    }
  ],
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Alice\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Location header\", () => pm.response.to.have.header(\"Location\"));",
                  "const body = pm.response.json();",
                  "pm.environment.set(\"userId\", body.id);",
                  "pm.test(\"Nome correto\", () => pm.expect(body.name).to.eql(\"Alice\"));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const body = pm.response.json();",
                  "pm.test(\"Mesmo ID\", () => pm.expect(body.id).to.eql(pm.environment.get(\"userId\")));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Wallets",
      "item": [
        {
          "name": "Create Wallet",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Idempotency-Key",
                "value": "{{idempotencyKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/wallets",
              "host": ["{{baseUrl}}"],
              "path": ["wallets"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Location header\", () => pm.response.to.have.header(\"Location\"));",
                  "const w = pm.response.json();",
                  "pm.environment.set(\"walletId\", w.id);",
                  "pm.test(\"userId correto\", () => pm.expect(w.userId).to.eql(pm.environment.get(\"userId\")));",
                  "pm.test(\"balance zero\", () => pm.expect(w.balance).to.eql(0));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Wallet",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/{{walletId}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{walletId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const w = pm.response.json();",
                  "pm.test(\"mesmo walletId\", () => pm.expect(w.id).to.eql(pm.environment.get(\"walletId\")));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Current Balance",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/{{walletId}}/balance",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{walletId}}", "balance"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const b = pm.response.json().balance;",
                  "pm.test(\"balance numérico\", () => pm.expect(typeof b).to.eql(\"number\"));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Historical Balance",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/{{walletId}}/balance?at={{timestamp}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{walletId}}", "balance"],
              "query": [
                {
                  "key": "at",
                  "value": "{{timestamp}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const b = pm.response.json().balance;",
                  "pm.test(\"balance numérico\", () => pm.expect(typeof b).to.eql(\"number\"));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Deposit",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Idempotency-Key",
                "value": "{{idempotencyKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/{{walletId}}/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{walletId}}", "deposit"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const w = pm.response.json();",
                  "pm.test(\"balance atualizado\", () => pm.expect(w.balance).to.eql(50));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Withdraw",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Idempotency-Key",
                "value": "{{idempotencyKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 20\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/{{walletId}}/withdraw",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{walletId}}", "withdraw"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const w = pm.response.json();",
                  "pm.test(\"balance reduzido\", () => pm.expect(w.balance).to.eql(30));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Transfer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Idempotency-Key",
                "value": "{{idempotencyKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"targetWalletId\": \"{{otherWalletId}}\",\n  \"amount\": 15\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/{{walletId}}/transfer",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{walletId}}", "transfer"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const w = pm.response.json();",
                  "pm.test(\"balance debitado\", () => pm.expect(w.balance).to.eql(15));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}
